@inherits Microsoft.Extensions.CodeGeneration.Templating.RazorTemplateBase
@{ 
    var typedModel = Model as Taggl.CodeGeneration.Generators.ApiController.ApiControllerTemplateModel;
    Model = null;
    var numberOfServices = typedModel.InjectedServices.Count();
}
using Microsoft.AspNet.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
@foreach (string namespaceName in typedModel.UsingNamespaceNames)
{
@:using @(namespaceName);
}

namespace @typedModel.NamespaceName
{
    [Route("@(typedModel.ControllerRouteTemplate)")]
    public class @typedModel.ClassName : Controller
    {
        @foreach (var serviceDeclarationModel in typedModel.InjectedServices)
        {
        @:private readonly @serviceDeclarationModel.TypeName @serviceDeclarationModel.LocalName;
        }

        public @(typedModel.ClassName)(
            @for (int i = 0; i < numberOfServices; i++)
            {
            var serviceDeclarationModel = typedModel.InjectedServices[i];
            string output = $"{serviceDeclarationModel.TypeName} {serviceDeclarationModel.ArgumentName}";
            if (i == numberOfServices - 1)
            {
                output += ")";
            }
            else
            {
                output += ",";
            }
            @:@(output)
            }
        {
            @foreach (var serviceDeclarationModel in typedModel.InjectedServices)
            {
            @:@(serviceDeclarationModel.LocalName) = @(serviceDeclarationModel.ArgumentName);
            }
        }
        @foreach (var action in typedModel.Actions)
        {
            bool isAsync = action.ServiceMethod.IsAsync;

            string baseMethodSignature = action.Method.AccessModifier;
            if (isAsync)
            {
                baseMethodSignature += " async";
            }
            baseMethodSignature += $" {action.Method.ReturnTypeName} {action.ServiceMethod.BaseName}";

            string serviceMethodInvocationLine = string.Empty;
            if (action.ServiceMethod.ReturnsValue)
            {
                serviceMethodInvocationLine += "var result = ";
            }
            if (isAsync)
            {
                serviceMethodInvocationLine += "await";
            }
            serviceMethodInvocationLine +=
                $" {typedModel.Service.LocalName}.{action.ServiceMethod.Name}" +
                $"({string.Join(", ", action.Method.ParameterNames)});";

        @:
        @foreach (string attribute in action.Attributes)
        {
        @:@attribute
        }
        @:@(baseMethodSignature)(@string.Join(", ", action.Method.Parameters))
        @:{
            @:@serviceMethodInvocationLine
            @if (action.ServiceMethod.ReturnsValue)
            {
            @:if (result == null)
            @:{
                @:HttpNotFound();
            @:}
            @:return new ObjectResult(result);
            }
            else
            {
            @:return Ok();
            }
        @:}
        }
    }
}