@inherits Microsoft.Extensions.CodeGeneration.Templating.RazorTemplateBase
@{
    var interfaceServiceName = $"I{Model.ServiceName}";
    var modelLamdbaAlias = Model.EntityName.ToString().ToLower();
    var readDtoAsTypeArg = $"<{Model.ReadEntityDtoName}>";
    var readDtoEnumerableAsTypeArg = $"<IEnumerable{readDtoAsTypeArg}>";
}
using Microsoft.AspNet.Identity;
using Microsoft.Data.Entity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using @(Model.EntitiesNamespaceName);
using @(Model.EntityNamespaceName);
using Taggl.Services.Identity;

namespace @Model.ServiceNamespaceName
{
    public interface @interfaceServiceName {
        @if (@Model.CanUpdate)
        {
        @:Task@(readDtoEnumerableAsTypeArg) ListAsync(string userId);
        }

        Task@(readDtoAsTypeArg) GetAsync(@(Model.EntityIdTypeName) id);

        Task@(readDtoAsTypeArg) CreateAsync(@(Model.CreateEntityDtoName) create);

        @if (@Model.CanUpdate)
        {
        @:Task@(readDtoAsTypeArg) UpdateAsync(@(@Model.UpdateEntityDtoName) update);
        }

        @if (@Model.CanDelete)
        {
        @:Task DeleteAsync(@(@Model.EntityIdTypeName) id);
        }
    }

    public class @Model.ServiceName : @interfaceServiceName
    {
        private readonly IIdentityResolver _identityResolver;
        private readonly ApplicationDbContext _dbContext;
        
        public @(Model.ServiceName)(
            ApplicationDbContext dbContext,
            IIdentityResolver identityResolver)
        {
            _dbContext = dbContext;
            _identityResolver = identityResolver;
        }
        
        public async Task@(readDtoAsTypeArg) GetAsync(@(Model.EntityIdTypeName) id)
        {
            var result = await _dbContext.@(Model.DbSetPropertyName)
                .Where(@modelLamdbaAlias => @(modelLamdbaAlias).Id == id)
                .FirstOrDefaultAsync();
            return new @(Model.ReadEntityDtoName)(result);
        }

        @if (@Model.CanUpdate)
        {
        @:public async Task@(readDtoEnumerableAsTypeArg) ListAsync(string userId)
        @:{
            @:return (await _dbContext.@(Model.DbSetPropertyName)
                @:.Where(@modelLamdbaAlias => @(modelLamdbaAlias).CreatedById == userId)
                @:.ToListAsync()).Select(@modelLamdbaAlias => new @(Model.ReadEntityDtoName)(@modelLamdbaAlias));
        @:}
        }
    }
}